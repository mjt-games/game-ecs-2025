{"version":3,"file":"queryFilter.test.js","sourceRoot":"","sources":["../../src/common/queryFilter.test.ts"],"names":[],"mappings":"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","sourcesContent":["import { describe, expect, test } from \"vitest\";\nimport { Component } from \"../type/Component\";\nimport { Entity } from \"../type/Entity\";\nimport { LazyObjects } from \"./LazyObjects\";\nimport { Query } from \"../type/Query\";\nimport { queryFilter } from \"./queryFilter\";\n\ndescribe(\"filterEntities\", () => {\n  type IdComponent = Component<\"core\", \"id\", number>;\n\n  type PositionComponent = Component<\n    \"world\",\n    \"position\",\n    { x: number; y: number; z?: number }\n  >;\n  type HealthComponent = Component<\"stats\", \"health\", number>;\n  type NameComponent = Component<\"char\", \"name\", string>;\n  type TagsComponent = Component<\"core\", \"tags\", string[]>;\n\n  type MyEntity = Entity<\n    [\n      IdComponent,\n      PositionComponent,\n      HealthComponent,\n      TagsComponent,\n      NameComponent\n    ]\n  >;\n  const lazy = LazyObjects();\n  const testEntity1 = lazy.from<MyEntity>({\n    core: { id: 1, tags: [\"foo\"] },\n    world: { position: { x: -1, y: 2 } },\n    stats: { health: 100 },\n    char: { name: \"Alice\" },\n  });\n  const testEntity2 = lazy.from<MyEntity>({\n    core: { id: 2, tags: [\"foo\", \"bar\"] },\n    world: { position: { x: 0, y: 2, z: 3 } },\n    stats: { health: 18 },\n    char: { name: \"Bob\" },\n  });\n  const testEntity3 = lazy.from<MyEntity>({\n    core: { id: 3, tags: [\"bar\"] },\n    stats: { health: 5 },\n    char: { name: \"Carol\" },\n  });\n  const entities = [testEntity1, testEntity2, testEntity3];\n\n  lazy.setSuppressLazy(true);\n  test(\"match\", () => {\n    const query: Query<\n      [IdComponent, PositionComponent | TagsComponent, HealthComponent]\n    > = {\n      match: { key: \"core.id\", value: 1 },\n    };\n    const filtered = queryFilter(query)(entities);\n    expect(filtered.length).toBe(1);\n    expect(filtered[0].core.id).toBe(1);\n  });\n  test(\"contains\", () => {\n    const query: Query<\n      [\n        IdComponent,\n        PositionComponent | TagsComponent,\n        HealthComponent | NameComponent\n      ]\n    > = {\n      match: { key: \"core.tags\", op: \"contains\", value: \"foo\" },\n    };\n    const filtered = queryFilter(query)(entities);\n    expect(filtered.length).toBe(2);\n    expect(filtered.map((f) => f.core.id)).toEqual([1, 2]);\n  });\n  test(\"regex\", () => {\n    const query: Query<\n      [\n        IdComponent,\n        PositionComponent | TagsComponent,\n        HealthComponent | NameComponent\n      ]\n    > = {\n      match: { key: \"char.name\", op: \"ri\", value: \"O\" },\n    };\n    const filtered = queryFilter(query)(entities);\n    expect(filtered.length).toBe(2);\n    expect(filtered.map((f) => f.core.id)).toEqual([2, 3]);\n  });\n  test(\"has\", () => {\n    const query: Query<\n      [IdComponent, PositionComponent | TagsComponent, HealthComponent]\n    > = {\n      has: [\"world.position\"],\n    };\n    const filtered =\n      queryFilter<\n        [IdComponent, PositionComponent | TagsComponent, HealthComponent]\n      >(query)(entities);\n    expect(filtered.length).toBe(2);\n    expect(filtered.map((f) => f.core.id)).toEqual([1, 2]);\n  });\n  test(\"not\", () => {\n    const query: Query<\n      [IdComponent, PositionComponent | TagsComponent, HealthComponent]\n    > = {\n      not: [\"world.position\"],\n    };\n    const filtered =\n      queryFilter<\n        [IdComponent, PositionComponent | TagsComponent, HealthComponent]\n      >(query)(entities);\n    expect(filtered.length).toBe(1);\n    expect(filtered.map((f) => f.core.id)).toEqual([3]);\n  });\n  test(\"and\", () => {\n    const query: Query<\n      [IdComponent, PositionComponent | TagsComponent, HealthComponent]\n    > = {\n      has: [\"world.position\"],\n      match: { key: \"stats.health\", value: 100 },\n    };\n    const filtered =\n      queryFilter<\n        [IdComponent, PositionComponent | TagsComponent, HealthComponent]\n      >(query)(entities);\n    expect(filtered.length).toBe(1);\n    expect(filtered.map((f) => f.core.id)).toEqual([1]);\n  });\n  test(\"or\", () => {\n    const query: Query<\n      [IdComponent, PositionComponent | TagsComponent, HealthComponent]\n    > = {\n      match: { key: \"stats.health\", value: 18 },\n      or: { match: { key: \"stats.health\", value: 5 } },\n    };\n    const filtered =\n      queryFilter<\n        [IdComponent, PositionComponent | TagsComponent, HealthComponent]\n      >(query)(entities);\n    expect(filtered.length).toBe(2);\n    expect(filtered.map((f) => f.core.id)).toEqual([2, 3]);\n  });\n});\n"]}